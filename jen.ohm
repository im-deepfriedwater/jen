Jen {
  Program         = Body
  Body            = (Statement | Expression)* newLine*

  Statement       = Conditional | Loop | Declaration | Assignment | FuncDec
                  | ReturnExp

  FuncDec         = Annotation newLine Signature newLine Body
  Annotation      = id ":" ParamTypes "->" ParamTypes
  ParamTypes      = NonemptyListOf<type, ",">
  Signature       = id "(" Params "):"
  Params          = NonemptyListOf<id, ",">
  ReturnExp       = "return" Expression


  Expression      = TernExp

  TernExp         = (Exp0 "?" TernExp ":" TernExp)                     -- ternary
                  | Exp0
  Exp0            = Exp0 "&&" Exp1                                     -- and
                  | Exp0 "||" Exp1                                     -- or
                  | Exp1
  Exp1            = (Exp1 addop Exp2)                                  -- binary
                  | Exp2
  Exp2            = (Exp2 mulop Exp3)                                  -- binary
                  | Exp3
  Exp3            = (Exp3 "^" Exp4)                                    -- binary
                  | Exp4
  Exp4            = (Exp4 relop Exp5)                                  -- binary
                  | Exp5
  Exp5            = Exp5 "." Exp6 ~"("                                 -- accessor
                  | Exp5 "." FuncCall                                  -- binary
                  | Exp6

  Exp6            = numLiteral
                  | stringLiteral
                  | char
                  | id
                  | booleanLiteral
                  | ListExp
                  | "(" Expression ")"                                 -- parens

  Exps            = NonemptyListOf<Expression, ",">
  ListExp         = id List                                            -- subscript
                  | List
  List            = "[" ListOf<Expression, ","> "]"

  Loop            = For | While
  For             = "for " id "in" (id | ListExp)
  While           = "while" Expression ":\n" Body

  Declaration     = ids ":=" Exps
  Assignment      = ids "=" Exps
  FuncCall        = id "("ListOf<Expression, ",">")"

  Conditional     = "if" Expression ":" Body (ElseIfCondition)+ ElseCondition?
  ElseCondition   = "else :\n" Body
  ElseIfCondition = "else if " Expression ":\n" Body

  id              = varId | constId | packageId | propertyId
  ids             = nonemptyListOf<id, ",">

  varId           = ~keyword ("_" | lower) idrest*
  constId         = upper ("_" | upper | digit)* ~lower
  packageId       = upper idrest*
  propertyId      = id "." id

  idrest          =  "_" | alnum

  keyword         = ("if" | "while" | "else" | "for" | "else if" | "print" | "true"
                  | "false" | "typeof" | "return") ~idrest
  type            = "string" | "boolean" | "char" | "number" | "list"
                  | "object" | "any" | "void" | "error"
  numLiteral      = digit+
  stringLiteral   = "\"" (char | "\'")* "\""
                  | "\'" (char | "\"")* "\'"
  char            = ~"\\" ~"\"" ~"'" ~"\n" ("\'"any"\'" | "\"" any "\"")
  booleanLiteral  = "true" | "false"


  addop           = "+" | "-"
  mulop           = "*" | "%" | "/" | "//" | "/%"
  relop           = ">" | "<" | "==" | "!=" | "<=" | ">="

  space           := " " | comment
  newLine         = "\r"? "\n"
  comment         = ";" (~newLine any)* newLine*
                  | ";;" any* ";;"
}
