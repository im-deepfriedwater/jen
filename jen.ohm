Jen {
  Program         = Body
  Body            =  (newLine* Statement newLine* | newLine* Expression newLine*)*

  Statement       = Conditional | Loop | Declaration | Assignment | FuncDec
                  | ReturnExp | TypeDeclaration

  FuncDec         = Annotation newLine Signature newLine Body
  Annotation      = (varId | constId) ":" ParamTypes "->" ParamTypes
  ParamTypes      = NonemptyListOf<Type, ",">
  Signature       = (varId | constId) "(" Params "):"
  Params          = NonemptyListOf<varId, ",">
  ReturnExp       = "return" ListOf<Expression, ",">


  Expression      = (Exp0 "?" Expression ":" Expression)               -- ternary
                  | Exp0
  Exp0            = Exp0 "&&" Exp1                                     -- and
                  | Exp0 "||" Exp1                                     -- or
                  | Exp0 "&!&" Exp1                                    -- xor
                  | Exp1

  Exp1            = (Exp1 addop Exp2)                                  -- binary
                  | Exp2
  Exp2            = (Exp2 mulop Exp3)                                  -- binary
                  | Exp3
  Exp3            = (Exp3 "^" Exp4)                                    -- binary
                  | Exp4
  Exp4            = (Exp4 relop Exp5)                                  -- binary
                  | Exp5
  Exp5            = "!" Exp5                                           -- not
                  | Exp6
  Exp6            = Exp6 "." Exp7 ~"("                                 -- accessor
                  | Exp6 "." FuncCall                                  -- binary
                  | Exp7
  Exp7            = numLiteral
                  | stringLiteral
                  | charLiteral
                  | booleanLiteral
                  | ListExp
                  | FuncCall
                  | id
                  | "(" Expression ")"                                 -- parens

  Exps            = NonemptyListOf<Expression, ",">
  ListExp         = id List                                            -- subscript
                  | List
  List            = "[" ListOf<Expression, ","> "]"

  Loop            = For | While
  For             = "for " id "in" (Expression) ":" Body
  While           = "while" Expression ":" Body

  Declaration     = Ids ":=" Exps
  TypeDeclaration = "type" varId (Type)+
  Assignment      = Ids "=" Exps
  FuncCall        = (varId | funcId) "("ListOf<Expression, ",">")"

  Conditional     = "if" Expression ":" newLine+ Body (ElseIfCondition)* (ElseCondition)?
  ElseCondition   = "else" ":" newLine+ Body
  ElseIfCondition = "else if" Expression ":" newLine+ Body

  id              = varId | constId | packageId | propertyId
  Ids             = NonemptyListOf<(varId | constId), ",">

  varId           = ~keyword ("_" | lower) idrest*
  constId         = upper ("_" | upper | digit)* ~lower
  packageId       = upper idrest*
  propertyId      = id "." id

  idrest          =  "_" | alnum

  keyword         = ("if" | "while" | "else" | "for" | "else if" | "print" | "true"
                  | "false" | "typeof" | "return") ~idrest

  funcId          = "typeof" | "print"

  Type            = basicType | ListType | SumType
  basicType       = "string" | "boolean" | "char" | "number"
                  | "object" | "any" | "void" | "error"

  ListType        = "list" nonemptyListOf<Type, ","> ~"list"
  SumType         = ((basicType | id) "|")+
  booleanLiteral  = "true" | "false"
  numLiteral      = digit+ ~letter
  stringLiteral   = "\"" (~"\"" char | "'")* "\""
                  | "'" (~"'"char | "\"")* "'"
  charLiteral     = ("'" char "'" | "\"" char "\"")
  char            = escape
                  | ~";" ~newLine any
  escape          = "\\n" | "\\"

  addop           = "+" | "-"
  mulop           = "*" | "%" | "//" | "/%" | "/"
  relop           = "<=" | ">=" | ">" | "<" | "==" | "!="

  space           := " " | comment
  newLine         = "\r"? "\n"
  comment         = ";" (~newLine any)* newLine*
                  | ";;" any* ";;"
}
