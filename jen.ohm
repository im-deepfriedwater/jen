Jen {
  Program            = newLine* Body newLine*
  Body               = (newLine* Statement newLine* | newLine* Expression newLine*)*

  Suite              = newLine* indent Body dedent

  Statement          = Conditional | Loop | Declaration | Assignment | FuncDec
                     | TypeDec | ReturnExp

  Expression         = (Exp0 "?" Expression ":" Expression)               -- ternary
                     | Exp0
  Exp0               = Exp0 "&&" Exp1                                     -- and
                     | Exp0 "||" Exp1                                     -- or
                     | Exp0 "&!&" Exp1                                    -- xor
                     | Exp1

  Exp1               = (Exp1 addop Exp2)                                  -- binary
                     | Exp2
  Exp2               = (Exp2 mulop Exp3)                                  -- binary
                     | Exp3
  Exp3               = (Exp3 "^" Exp4)                                    -- binary
                     | Exp4
  Exp4               = (Exp4 relop Exp5)                                  -- binary
                     | Exp5
  Exp5               = "!" Exp5                                           -- not
                     | Exp6
  Exp6               = Exp6 "." Exp7 ~"("                                 -- accessor
                     | Exp6 "." FuncCall                                  -- binary
                     | Exp7
  Exp7               = numLiteral
                     | stringLiteral
                     | charLiteral
                     | booleanLiteral
                     | SubscriptExp
                     | FuncCall
                     | id
                     | "(" Expression ")"                                 -- parens

  SubscriptExp       = id "[" Expression"]"                               -- subscript

  List               = "[" ListOf<Expression, ","> "]"
  ListAndExp         = ListOf<(Expression | List), ",">
  NonemptyListAndExp = NonemptyListOf<(Expression | List), ",">


  Loop               = For | While
  For                = "for " ListAndExp "in" (Expression) ":" Suite
  While              = "while" Expression ":" Suite

  FuncDec            = Annotation newLine Signature newLine Suite ReturnExp?
  Annotation         = (varId | constId) ":" ParamTypes "->" ParamTypes
  ParamTypes         = NonemptyListOf<(Type | id), ",">
  Signature          = (varId | constId) "(" Params "):"
  Params             = NonemptyListOf<varId, ",">
  ReturnExp          = "return" ListOf<Expression, ",">

  FuncCall           = (varId | funcId | SubscriptExp) "("ListAndExp")"

  TypeDec            = "type" varId SumType
  Declaration        = Ids ":=" NonemptyListAndExp
  Assignment         = Ids "=" NonemptyListAndExp

  Conditional        = "if" Expression ":" newLine+ Suite (ElseIfCondition)* (ElseCondition)?
  ElseCondition      = "else" ":" newLine+ Suite
  ElseIfCondition    = "else if" Expression ":" newLine+ Suite

  id                 = varId | constId | packageId
  Ids                = NonemptyListOf<(SubscriptExp | id), ",">
  keyword            = ("if" | "while" | "else" | "for" | "else if" | "print" | "true"
                     | "false" | "typeof" | "return" | "type") ~idrest
  idrest             =  "_" | alnum
  varId              = ~keyword ("_" | lower) idrest*
  constId            = upper ("_" | upper | digit)* ~lower
  packageId          = upper idrest*
  funcId             = "typeof" | "print"

  Type               = basicType | ListType | SumType
  basicType          = "string" | "boolean" | "char" | "number"
                     | "object" | "any" | "void" | "error"

  ListType           = "list"+ ( id | basicType | SumType ) ~"list"
  SumType            = ((basicType | id) "|" (basicType | id))+
  booleanLiteral     = "true" | "false"
  numLiteral         = digit+ ~letter
  stringLiteral      = "\"" (~"\"" char | "'")* "\""
                     | "'" (~"'"char | "\"")* "'"
  charLiteral        = ("'" char "'" | "\"" char "\"")
  char               = escape
                     | ~";" ~newLine any

  addop              = "+" | "-"
  mulop              = "*" | "%" | "//" | "/%" | "/"
  relop              = "<=" | ">=" | ">" | "<" | "==" | "!="

  escape             = "\\n" | "\\"
  space              := " " | comment
  newLine            = "\r"? "\n"

  comment            = ";" ~";" (~newLine ~";" any)*                              -- comment
                     | multiLineComment

  multiLineComment   = ";;" (~";" any)* ";;"
  indent             =  "⇨"
  dedent             =  "⇦"
}
