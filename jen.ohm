Jen {
  Program         = (Block)*
  Block           = FuncDec | Body

  FuncDec         = Annotation "\n" Signature "\n" Body
  Annotation      = id ":" ParamTypes "->" ParamTypes
  ParamTypes      = type ("," type)*
  Signature       = id "(" Params "):"
  Params          = id ("," id)*

  Body            = (Statement | Expression)*

  Statement       = Conditional | Loop | Declaration | Assignment

  Expression      = (Expression "?" Expression ":" Expression) | Exp0
  Exp0            = Exp0 ("&&" | "||") Exp1
                  | Exp1
  Exp1            = (Exp1 addop Exp2)
                  | Exp2
  Exp2            = (Exp2 mulop Exp3)
                  | Exp3
  Exp3            = (Exp3 "^" Exp4)
                  | Exp4
  Exp4            = (Exp4 relop Exp5)
                  | Exp5
  Exp5            = (Exp5 "." Exp6)
                  | Exp6
  Exp6            = "(" Expression ")"
                  | "[" Expression "]"
                  | Exp7
  Exp7            = numLiteral
                  | stringLiteral
                  | char
                  | id
                  | booleanLiteral
                  | FuncCall

  Loop            = For | While
  For             = "for " id "in" (id | List)
  List            = "[" (Expression("," Expression)*)? "]"
  While           = "while" Expression ":\n" Body

  Declaration     = id ("," id)* ":=" Exp7 ("," Exp7)*
  Assignment      = id ("," id)* "=" Exp7 ("," Exp7)*
  FuncCall        = id "(" (Exp7 ("," Exp7)*)? ")"

  Conditional    = "if" Expression ":" Body (ElseIfCondition)+ ElseCondition?
  ElseCondition   = "else :\n" Body
  ElseIfCondition = "else if " Expression ":\n" Body

  id              = varId | constId
  varId           = ("_" | lower) idrest*
  idrest          =  "_" | alnum
  constId         = upper ("_" | upper | digit)*
  keyword         = ("if" | "while" | "else" | "for" | "else if" | "print" | "true" | "false") ~idrest
  type            = "string" | "boolean" | "char" | "number" | "list"
                  | "object" | "any" | "void" | "error"
  numLiteral      = digit+
  stringLiteral   = "\"" (char | "\'")* "\""
  char            = ~"\\" ~"\"" ~"'" ~"\n" any
  booleanLiteral  = "true" | "false"

  addop           = "+" | "-"
  mulop           = "*" | "%" | "/" | "//" | "/%"
  relop           = ">" | "<" | "==" | "!=" | "<=" | ">="

  space           += comment
  comment         = ";" (~"\n" any)* "\n"
                  | ";;" any* ";;"
}
