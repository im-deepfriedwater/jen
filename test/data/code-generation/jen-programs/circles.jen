; input is radius and number of throws, output is estimated area
circleEstimator: number, number -> number
circleEstimator(radius, throws):
  hits := 0
  remainingThrows := throws
  randomX := 0
  randomY := 0
  while(remainingThrows > 0):
    randomX = random() * radius * 2
    randomY = random() * radius * 2
    if (distanceBetween(randomX, randomY, radius, radius) < radius):
      hits = hits + 1
    remainingThrows = remainingThrows - 1
  return (hits / throws) * 4 * radius

sqrt: number -> number
sqrt(num):
  root := num / 2
  iterations := 0
  while(iterations < 20):
    root = (root + num / root) / 2
    iterations = iterations + 1
  return root

distanceBetween: number, number, number, number -> number
distanceBetween(x1, y1, x2, y2):
  return sqrt((y2 - y1)^2 + (x2 - x1)^2)

circleExact: number -> number
circleExact(radius):
  return radius^2 * pi()


checkDartsUntilPrecise: number, number -> number
checkDartsUntilPrecise(decimals, radius):
  throws := 50
  circleEst := circleEstimator(radius, throws)
  circleEx := circleExact(radius)
  while((circleEst - circleEx) * decimals > 1 && (circleEst - circleEx) * decimals < 1):
    throws = throws * 2
    circleEst = circleEstimator(radius, throws)
  return throws

print (sqrt(2)) ; should be about 1.414
print (sqrt(100)) ; should be about 10
print (distanceBetween(0, 1, 0, 3)) ; should be 2
print (circleEstimator(10, 100000)) ; should be about 314
print (checkDartsUntilPrecise(300, 1)) ; no idea what this should be tbh
