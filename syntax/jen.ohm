Jen {
  Program            = newLine* Body newLine*
  Body               = ((Statement | Expression) newLine+)* (Statement | Expression)
  Suite              = newLine+ indent  Body newLine dedent newLine*
  Statement          = Conditional | Loop | Declaration | Assignment | FuncDec
                     | TypeDec | ReturnExp
  Expression         = (Exp0 "?" Expression ":" Expression)                -- ternary
                     | Exp0
  Exp0               = Exp0 "&&" Exp1                                      -- and
                     | Exp0 "||" Exp1                                      -- or
                     | Exp0 "&!&" Exp1                                     -- xor
                     | Exp1
  Exp1               = (Exp1 addop Exp2)                                   -- binary
                     | Exp2
  Exp2               = (Exp2 mulop Exp3)                                   -- binary
                     | Exp3
  Exp3               = (Exp3 "^" Exp4)                                     -- binary
                     | Exp4
  Exp4               = (Exp4 relop Exp5)                                   -- binary
                     | Exp5
  Exp5               = "!" Exp5                                            -- not
                     | Exp6
  Exp6               = Exp6 "." FuncCall                                   -- binary
                     | Exp6 "." id                                         -- accessor
                     | Exp7
  Exp7               = numLiteral
                     | stringLiteral
                     | RecordLiteral
                     | SubscriptExp
                     | FuncCall
                     | id
                     | booleanLiteral
                     | errLiteral
                     | List
                     | "(" Expression ")"                                  -- parens
  SubscriptExp       = id "[" Expression "]"
  List               =  "[" ListOf<Expression, ","> "]"
  NonemptyExpressionList
                     = NonemptyListOf<Expression, ",">
  Loop               = For | While
  For                = "for" NonemptyListOf<id, ","> "in" Expression ":" Suite
  While              = "while" Expression ":" Suite
  FuncDec            = Annotation newLine Signature newLine Suite
  Annotation         = (varId | constId) ":" ParamTypes "->" ParamTypes
  ParamTypes         = NonemptyListOf<Type, ",">
  Signature          = (varId | constId) "(" Params "):"
  Params             = NonemptyListOf<varId, ",">
  ReturnExp          = "return" ListOf<Expression, ",">
  FuncCall           = (varId | funcId | SubscriptExp) "(" ListOf<Expression, ","> ")"
  TypeDec            = "type" varId SumType
  Declaration        = Ids ":=" NonemptyExpressionList
  Assignment         = Ids "=" NonemptyExpressionList
  Conditional        = "if" Expression ":" Suite (ElseIfCondition)* (ElseCondition)?
  ElseCondition      = "else" ":" Suite
  ElseIfCondition    = "else if" Expression ":" Suite
  id                 = varId | constId | packageId
  Ids                = NonemptyListOf<(SubscriptExp | id), ",">
  keyword            = ("if" | "while" | "else" | "for" | "else if" | "print" | "true"
                     | "false" | "typeof" | "return" | "type" | "ok" | "err" | basicType) ~idrest
  idrest             =  "_" | alnum
  varId              = ~keyword ("_" | lower) idrest*
  constId            = upper ("_" | upper | digit)* ~lower
  packageId          = upper idrest*
  funcId             = "typeof" | "print"
  Type               = basicType | ListType | SumType | RecordType | id
  basicType          = "string" | "boolean" | "char" | "number"
                     | "object" | "any" | "void" | "error"
  ListType           = "list"+ ( id | basicType | SumType ) ~"list"
  SumType            = (id | basicType) "|" (id | basicType) ("|" (id | basicType))*
  RecordType         = "{" NonemptyListOf<Field, ","> "}"
  Field              = id ":" Type
  FieldValue         = id ":" Expression
  RecordLiteral      = "{" NonemptyListOf<FieldValue, ","> "}"
  booleanLiteral     = "true" | "false"
  errLiteral         = "ok" | "err"
  numLiteral         = digit+ ~letter
  stringLiteral      = "\"" (~"\"" char | "'")* "\""
                     | "'" (~"'"char | "\"")* "'"
  char               = escape
                     | ~";" ~newLine any
  addop              = "+" | "-"
  mulop              = "*" | "%" | "//" | "/%" | "/"
  relop              = "<=" | ">=" | ">" | "<" | "==" | "!="
  escape             = "\\n" | "\\"
  space              := " " | comment
  newLine            = "\r"? "\n"
  indent             =  "⇨"
  comment            = ";" ~";" (~newLine ~";" any)*                              -- comment
                     | multiLineComment
  multiLineComment   = ";;" (~";" any)* ";;"
  dedent             =  "⇦"
}
