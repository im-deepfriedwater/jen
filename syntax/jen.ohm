Jen {
  Program            = newLine* Body newLine*
  Body               = Statement*
  Suite              = newLine* indent Body dedent

  Statement          = Conditional
                     | Loop
                     | Declaration newLine+                                 -- declaration
                     | Assignment newLine+                                  -- assignment
                     | FuncCall newLine+                                    -- call
                     | FuncDec
                     | TypeDec newLine+                                     -- typedec
                     | Return newLine+                                      -- return
                     | "break" newLine+                                     -- break
                     | Expression newLine+                                  -- expression

  Expression         = (Exp0 "?" Expression ":" Expression)                -- ternary
                     | Exp0
  Exp0               = Exp0 "&&" Exp1                                      -- and
                     | Exp0 "||" Exp1                                      -- or
                     | Exp0 "&!&" Exp1                                     -- xor
                     | Exp1
  Exp1               = (Exp1 relop Exp2)                                   -- binary
                     | Exp2
  Exp2               = (Exp2 addop Exp3)                                   -- binary
                     | Exp3
  Exp3               = (Exp3 mulop Exp4)                                   -- binary
                     | Exp4
  Exp4               = (Exp4 "^" Exp5)                                     -- binary
                     | Exp5
  Exp5               = "!" Exp5                                            -- not
                     | Exp6
  Exp6               = FuncCall
                     | Exp6 "." id                                         -- accessor
                     | Exp7
  Exp7               = numLiteral
                     | stringLiteral
                     | RecordLiteral
                     | SubscriptExp
                     | VariableExpression
                     | booleanLiteral
                     | errLiteral
                     | List
                     | "(" Expression ")"                                  -- parens
  VariableExpression = id
  VariableExpressions
                     = NonemptyListOf<VariableExpression, ",">
  SubscriptExp       = VariableExpression "[" Expression "]"
  List               =  "[" ListOf<Expression, ","> "]"
  NonemptyExpressionList
                     = NonemptyListOf<Expression, ",">
  Loop               = For | While
  For                = "for" NonemptyListOf<id, ","> "in" Expression ":" Suite
  While              = "while" Expression ":" Suite
  FuncDec            = Annotation newLine Signature newLine Suite
  Annotation         = (varId | constId) ":" ParamTypes "->" ParamTypes
  ParamTypes         = NonemptyListOf<Type, ",">
  Signature          = (varId | constId) "(" Params "):"
  Params             =  ListOf<varId, ",">
  Return             = "return" ListOf<Expression, ",">
  FuncCall           = ( Exp6_accessor | SubscriptExp | VariableExpression) "(" ListOf<Expression, ","> ")"
  TypeDec            = "type" varId ":" SumType
  Declaration        = Ids ":=" NonemptyExpressionList
  Assignment         =  (SubscriptExp | VariableExpressions)"=" NonemptyExpressionList
  Conditional        = "if" Expression ":" Suite ("else if" Expression ":" Suite)* ("else" ":" Suite)?
  id                 = varId | constId
  Ids                = NonemptyListOf<(SubscriptExp | id), ",">
  keyword            = (basicType | "while" | "else" | "for" | "else if"
                     | "true" | "false" | "return" | "break" | "type" | "ok"
                     | "err"  | "list") ~idrest
  idrest             =  "_" | alnum
  varId              = ~keyword ("_" | lower) idrest*
  constId            = upper ("_" | upper | digit)* ~lower
  Type               = ListType | RecordType | VariableExpression | basicType
  basicType          = "string" | "boolean" | "number" | "record"
                     | "any" | "void" | "error"
  ListType           = "list"+ ( basicType | RecordType | VariableExpression )
  SumType            = Type "|" Type ("|" Type)*
  RecordType         = "{" NonemptyListOf<Field, ","> "}"
  Field              = id ":" Type
  FieldValue         = id ":" Expression
  RecordLiteral      = "{" NonemptyListOf<FieldValue, ","> "}"
  booleanLiteral     = "true" | "false"
  errLiteral         = "ok" | "err"
  numLiteral         = digit+ ("." digit+)?
  stringLiteral      = "\"" (~"\"" char | "'")* "\""
                     | "'" (~"'"char | "\"")* "'"
  char               = escape
                     | ~";" ~newLine any
  addop              = "+" | "-"
  mulop              = "*" | "%" | "//" | "/%" | "/"
  relop              = "<=" | ">=" | ">" | "<" | "==" | "!="
  escape             = "\\n" | "\\"
  space             := " " | "\t" | comment
  newLine            = "\r"? "\n"
  comment            = ";" ~";" (~newLine ~";" any)*                       -- comment
                     | multiLineComment
  multiLineComment   = ";;" (~";" any)* ";;"
  indent             =  "⇨"
  dedent             =  "⇦"
}
